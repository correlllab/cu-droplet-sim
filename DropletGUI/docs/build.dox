/*!

@page build Build Guide

@tableofcontents

This will be a full build guide.

@section buildsetup Dependencies

- Visual Studio 2010
- Bullet 2.80+  
- EasyBMP 1.06  
- Qt 4.8
- DropletSimLibrary  

@subsection buildvs2012 Visual Studio 2012 warning

Due to a lack of Visual Studio 2012 support in Qt 4.8 it is recommended that you use Visual Studio 2010 in order to build DropletGUI. If you do decide to use Visual Studio 2012 it is important that you do not update the project files when given the opportunity and that you have installed Qt in the default directories. Failing to do either will result in a broken build environment that is unable to build the project.

@section buildqt Installing Qt

DropletGUI requires Qt 4.8 in order to properly build and compile. Qt 4.8 and the recommended Visual Studio 2010 plug-in for Qt can currently be downloaded from <a href="http://qt-project.org/downloads">qt-projects.org</a>. It is highly recommended that you install Qt in the default directory as the build environment depends on being able to find the Qt libraries, and if you are attempting to build DropletGUI under Visual Studio 2012 or without the Visual Studio plug-in it will be unable to locate the Qt libraries if they are not in the default path.

Due to major changes in Qt 5.0, DropletGUI is not compatible with Qt 5.0 and will not run correctly with it. 

@section buildbuilding Building DropletGUI

Building DropletGUI is fairly straight-forward. To do this, you simply perform the following:
-# Navigate to the project folder found in `DropletSimulator/DropletSimDemos/DropletGUI/vs2010/`
-# Open the Visual Studio solution file `DropletGUI.sln`
-# Select one of the build configurations. See below for an explanation of each.
-# Under the Build menu, select Build Solution. On a clean checkout this will force it to build all dependent libraries and may take several minutes.
	

@section buildsettings Build Profiles

In order to facilitate a wide variety of development environments, the solution has several build configurations available to it. They are organized in the following manner:
- Debug / Retail configurations have support for property sheets to allow you to specify a custom Qt directory and are not configured to support running the executable inside the debugger.
- DebugTeam / RetailTeam configurations use the pre-defined \$\(QTDIR\) macro to use the default Qt directory. 
The Debug configurations build with full debugging symbols and with no optimizations enabled, whereas the Retail configurations build with no debugging symbols and full optimizations enabled. For performance reasons it is highly recommended that you use the Retail configurations if you are not actively developing the simulator.

@section builddebugging Interacting with the debugging configuration

In order to facilitate interactive debugging inside Visual Studio, the DebugTeam and ReleaseTeam configurations also perform an additional step where they consolidate all files necessary to execute DropletGUI into the vs2010//bin// folder so it can execute it from inside the debugger. This offers huge productivity enhancements and guarantees that it always has access to common files that it depends on such as the shared Projector Images, but also can be a source of confusion while developing. If you are executing DropletGUI from within the debugger and wish to modify the assets, it is important that you keep copies outside of the vs2010//bin folder as they will be overwritten the next time you build the project.



*/
