/*!

@page fileformats File Formats

@tableofcontents

DropletGUI uses a variety of plain text files to control run time properties. Below is a description of the various kinds of files used.

@section fileexperiment Experiments

Below are descriptions of files that can be modified to adjust how experiments run.

@subsection filesetup Setup Files

Setup files are found in `\DropletSimulator\DropletSimDemos\DropletGUI\assets\Setup\`. A setup file can specify droplet and arena variables. The simulator will just use a variable’s default value if it isn’t specified in the setup file. Each variable declaration must be on its own line.  The GUI will modify its parameters to reflect the contents of your selected setup file. If you have selected a setup file, you cannot modify the droplet table.<br>
<br>
Variables are specified by:<br>
@code
<variable name> <options>
@endcode
Projections are specified by:<br>
@code
projecting <projection image>
@endcode
Custom arena files are specified by:<br>
@code
arena <arena file name>
@endcode
A group of droplets is specified by:<br>
@code
droplets <droplet program> <number of droplets>
@endcode
To specify an exact starting position of an individual droplet:<br>
@code
droplets <droplet program> <x-coordinate> <y-coordinate>
@endcode
Physical objects are similarly specified:<br>
@code
<object> <x> <y> <radius> <mass> <friction>
@endcode
Note that radius, mass, and friction are optional. `<object>` can be either `cube` or `sphere`.<br>
<br>
A group of objects is specified by:<br>
@code
<objects> <number> <radius> <mass> <friction>
@endcode
Again, radius, mass, and friction are optional. `<objects>` can be either `cubes` or `spheres`.<br>

Please refer to testSetup.txt in the Setup folder for an example.<br>

@subsection filearena Arena Files

Custom arena files are found in `\DropletSimulator\DropletSimDemos\DropletGUI\assets\Floors\`.  Custom arena files specify information about a particular floor tile. Every tile declaration needs to be on its own line.<br>
<br>
To specify a tile:<br>
@code
<x-coordinate> <y-coordinate> <top wall> <right wall> <bottom wall> <left wall>
@endcode
X and Y coordinates represent the grid position of the tile. You do not have to account for the length of a tile.<br>
Example grid:<br>
@code
| 0,2 | 1,2 | 2,2 |
| 0,1 | 1,1 | 2,1 |
| 0,0 | 1,0 | 2,0 |
@endcode
The wall variables are either `yes` or `no`. They are specific to one tile. <br>
Please refer to any of the example custom arena files in the Floors folder.<br>

@section fileadvanced Advanced

Below are descriptions of files that control which assets DropletGUI uses while rendering objects. These should not be modified for normal use as doing so may result in undefined behavior.

@subsection filemanifest Manifest file

The main manifest file contains a list that maps specific assets to specific objects used by the renderer and is located at `\DropletSimulator\DropletSimDemos\DropletGUI\assets\manifest.txt`.<br>
<br>
The format for the file is:<br>
@code
<variable name> <value>
@endcode
For each line `<variable name>` is one of the items indicated below, and `<value>`is the asset name to be assigned to it.<br>
<br>
<b>Texture names:</b><br>
These correspond with a file located in `assets\Textures` and are to be specified <i>without</i> the file extension.<br>
- `droplet_texture` is the texture to be applied to droplets 
- `floor_texture` is the texture to be applied to floor tiles
- `wall_texture` is the texture to be applied to walls
- `tower_texture` is the texture to be applied to IR towers
- `object_texture` is the texture to be applied to sphere objects
- `object_cube_texture` is the texture to be applied to cube objects

<b>Model names:</b><br>
These correspond with a file located in `assets\Models` and are to be specified <i>without</i> the file extension.<br>
- `droplet_mesh` is the model to be used for rendering droplets 
- `floor_mesh` is the model to be used for rendering floor tiles
- `wall_mesh` is the model to be used for rendering walls
- `tower_mesh` is the model to be used for rendering IR towers
- `object_mesh` is the model to be used for rendering sphere objects
- `object_cube_mesh` is the model to be used for rendering cube objects

<b>Shader names:</b><br>
These correspond with an entry defind inside the shader manifest file (explained below).<br>
- `droplet_shader` is the shader to be used for rendering droplets when the projector is off
- `droplet_projection` is the shader to be used for rendering droplets when the projector is on
- `floor_shader` is the shader to be used for rendering floor tiles when the projector is off
- `floor_projection` is the shader to be used for rendering floor tiles when the projector is on
- `wall_shader` is the shader to be used for rendering walls regardless of the projector status
- `tower_shader` is the shader to be used for rendering IR towers regardless of the projector status
- `object_shader` is the shader to be used for rendering sphere objects when the projector is off
- `object_projection` is the shader to be used for rendering sphere objects when the projector is on
- `object_cube_shader` is the shader to be used for rendering cube objects when the projector is off
- `object_cube_projection` is the shader to be used for rendering cube objects when the projector is on

@subsection fileshader Shader manifest file

The shader manifest file defines how vertex and fragment shaders are compiled for use by OpenGL and is located at `\DropletSimulator\DropletSimDemos\DropletGUI\assets\Shaders\shaders.txt`.

The format for the file is:<br>
@code
<program name> <vertex shader> <fragment shader>
@endcode
For each statement `<program name>` is the name you want to assign to the compiled program and `<vertex shader>` and `<fragment shader>` are complete file names referencing GLSL shader. For example:<br>
@code
debug DebugVertex.glsl DebugFragment.glsl
@endcode
Is used to define a shader program named `debug` that is comprised of the vertex shader found in `DebugVertex.glsl` and the fragment shader found in `DebugFragmnet.glsl`.<br>
*/
